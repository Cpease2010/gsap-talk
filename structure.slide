GSAP
Animation Toolkit

* History

.link https://en.wikipedia.org/wiki/History_of_animation Humans have depicted motion for a while

.link https://thumbs.gfycat.com/LinearJubilantAlaskanmalamute-mobile.mp4 Folks are still making animation using the old techniques

Traditional animation can be 12-24 frames per second.

Early Disney animators would make key frames roughly 6-10 frames a second depicting the highlights of an animated sequence.

Junior animators (read: warm bodies) would draw the frames inbetween the two key frames using lightboards.

These between frames were referred to as *tween* frames.

* GSAP - Starter Links

.link https://greensock.com/ Main Site
.link https://greensock.com/jump-start-js Jump Start Slide Show
.link https://greensock.com/get-started-js#basics Getting Started: Basics
.link https://ihatetomatoes.net/wp-content/uploads/2016/07/GreenSock-Cheatsheet-4.pdf Cheat Sheet


* Tween syntax

The 'Lite' and 'Max' distinguish a size vs. feature set tradeoff. Anything TweenLite can do, TweenMax can as well.

.code -edit -numbers slidecontent/tweensyntax.js

* Ease Property

The ease attribute determines which function to use when changing the attribute from one value to another.

.code -edit -numbers slidecontent/tweensyntax.js HLxxx

.link https://greensock.com/ease-visualizer Ease Visualizer

* Some Properties Of Note

- `paused`: boolean, creates the animation paused
- `transformOrigin`: string, e.g. "left top", can take px, percent
- `rotation`: string, e.g. "-170_short", or "-=30_cw" for degrees (ugh, radians plz)
- `autoAlpha`: int, like opacity but turns on hidden visibility at 0 for performance
- `className`: string, morph between properties two classes, "+=" to append it

A full set can be found on the [[https://greensock.com/docs/TweenMax][TweenMax documentation]]

* Function based values

.code -edit slidecontent/randomvalue.js

Functions can be applied to values, setting the final value equal to the return value of the function.

Here the value of `x` will be randomized.

* Function based values with multiple targets

.code -edit slidecontent/iterablevalue.js

The `".box"` selector can return multiple elements, and the function will be called per element with `index` and `target` passing the element index of the set and the element itself respectively.

The `x` value will be increased by 100 progressively for each element in the set.

* Tween Methods

Tweens can be stored in a reference that can be used to change the animation.

.code slidecontent/tweenmethods.js

* Delay issues

.code -edit slidecontent/delaymatching.js

If I want to create a sequence of tweens, this will work, but we have to do math on the `delay` property every time. 

Worse, changing the duration of a single tween has zero effect on the tweens intended to fire after it, forcing you to change all subsequent tween delays.

* TimelineMax

.code -edit slidecontent/timeline.js
Timelines solve delay counting by introducing consecutive tweens in a cohesive animation.

Timelines themselves can take properties, for example this timeline starts after a second delay and will repeat forever.

* Position Parameter

.code -edit slidecontent/basicposition.js
Timelines expose a powerful feature called [[https://greensock.com/position-parameter][positioning]]. Positioning enables you to move animations relative to other actions of the timeline.

* Plugins & Tools

GSAP offers plenty of [[https://greensock.com/plugins/?product_id=4921][plugins]] for additional functionality. Bezier movement, morph any svg to another svg, physics simulation, scroll position animation, draw svg line over time; plenty of options to do complicated motions wth DOM elements.

They also provide a developer tool [[https://greensock.com/gsdevtools][GSDevTools]] which provides a playground to manipulate timelines.

* Document Coordinates

[[http://javascript.info/coordinates][This site]] offers an excellent breakdown of DOM coordinates and how to find them.

An important take away - coordinates of objects with `getBoundingClientRect()` are relative to the client window, not the entire document.

You can take the `top` of an element and add `pageYOffset` to get it's document top.
Similarly, `pageXOffset` can be added to the `left` property of an element to get its document left.

* 
.background slidecontent/coords.png

